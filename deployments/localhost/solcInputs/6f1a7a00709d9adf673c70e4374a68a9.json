{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/automation/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/KeeperCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatible directly.\n */\npragma solidity ^0.8.0;\nimport {AutomationCompatible as KeeperCompatible} from \"./AutomationCompatible.sol\";\nimport {AutomationBase as KeeperBase} from \"./AutomationBase.sol\";\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./interfaces/AutomationCompatibleInterface.sol\";\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/KeepersVRFConsumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"./automation/KeeperCompatible.sol\";\nimport \"./vrf/VRFConsumerBaseV2.sol\";\nimport \"./interfaces/VRFCoordinatorV2Interface.sol\";\n\n/**\n * @title KeepersVRFConsumer\n * @notice KeepersVRFConsumer is a Chainlink Keepers compatible contract that also acts as a\n * VRF V2 requester and consumer. In particular, a random words request is made when `performUpkeep`\n * is called in a cadence provided by the upkeep interval.\n */\ncontract KeepersVRFConsumer is KeeperCompatibleInterface, VRFConsumerBaseV2 {\n  // Upkeep interval in seconds. This contract's performUpkeep method will\n  // be called by the Keepers network roughly every UPKEEP_INTERVAL seconds.\n  uint256 public immutable UPKEEP_INTERVAL;\n\n  // VRF V2 information, provided upon contract construction.\n  VRFCoordinatorV2Interface public immutable COORDINATOR;\n  uint64 public immutable SUBSCRIPTION_ID;\n  uint16 public immutable REQUEST_CONFIRMATIONS;\n  bytes32 public immutable KEY_HASH;\n\n  // Contract state, updated in performUpkeep and fulfillRandomWords.\n  uint256 public s_lastTimeStamp;\n  uint256 public s_vrfRequestCounter;\n  uint256 public s_vrfResponseCounter;\n\n  struct RequestRecord {\n    uint256 requestId;\n    bool fulfilled;\n    uint32 callbackGasLimit;\n    uint256 randomness;\n  }\n  mapping(uint256 => RequestRecord) public s_requests; /* request ID */ /* request record */\n\n  constructor(\n    address vrfCoordinator,\n    uint64 subscriptionId,\n    bytes32 keyHash,\n    uint16 requestConfirmations,\n    uint256 upkeepInterval\n  ) VRFConsumerBaseV2(vrfCoordinator) {\n    COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n    SUBSCRIPTION_ID = subscriptionId;\n    REQUEST_CONFIRMATIONS = requestConfirmations;\n    KEY_HASH = keyHash;\n    UPKEEP_INTERVAL = upkeepInterval;\n\n    s_lastTimeStamp = block.timestamp;\n    s_vrfRequestCounter = 0;\n    s_vrfResponseCounter = 0;\n  }\n\n  /**\n   * @notice Returns true if and only if at least UPKEEP_INTERVAL seconds have elapsed\n   * since the last upkeep or since construction of the contract.\n   * @return upkeepNeeded true if and only if at least UPKEEP_INTERVAL seconds have elapsed since the last upkeep or since construction\n   * of the contract.\n   */\n  function checkUpkeep(\n    bytes calldata /* checkData */\n  ) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {\n    upkeepNeeded = (block.timestamp - s_lastTimeStamp) > UPKEEP_INTERVAL;\n  }\n\n  /**\n   * @notice Requests random words from the VRF coordinator if UPKEEP_INTERVAL seconds have elapsed\n   * since the last upkeep or since construction of the contract.\n   */\n  function performUpkeep(bytes calldata /* performData */) external override {\n    if ((block.timestamp - s_lastTimeStamp) > UPKEEP_INTERVAL) {\n      s_lastTimeStamp = block.timestamp;\n\n      requestRandomWords();\n    }\n  }\n\n  /**\n   * @notice VRF callback implementation\n   * @param requestId the VRF V2 request ID, provided at request time.\n   * @param randomWords the randomness provided by Chainlink VRF.\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\n    // Check that the request exists. If not, revert.\n    RequestRecord memory record = s_requests[requestId];\n    require(record.requestId == requestId, \"request ID not found in map\");\n\n    // Update the randomness in the record, and increment the response counter.\n    s_requests[requestId].randomness = randomWords[0];\n    s_vrfResponseCounter++;\n  }\n\n  /**\n   * @notice Requests random words from Chainlink VRF.\n   */\n  function requestRandomWords() internal {\n    uint256 requestId = COORDINATOR.requestRandomWords(\n      KEY_HASH,\n      SUBSCRIPTION_ID,\n      REQUEST_CONFIRMATIONS,\n      150000, // callback gas limit\n      1 // num words\n    );\n    s_requests[requestId] = RequestRecord({\n      requestId: requestId,\n      fulfilled: false,\n      callbackGasLimit: 150000,\n      randomness: 0\n    });\n    s_vrfRequestCounter++;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// A mock for testing code that relies on VRFCoordinatorV2.\npragma solidity ^0.8.4;\n\nimport \"../shared/interfaces/LinkTokenInterface.sol\";\nimport \"../interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"../vrf/VRFConsumerBaseV2.sol\";\nimport \"../shared/access/ConfirmedOwner.sol\";\n\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface, ConfirmedOwner {\n    uint96 public immutable BASE_FEE;\n    uint96 public immutable GAS_PRICE_LINK;\n    uint16 public immutable MAX_CONSUMERS = 100;\n\n    error InvalidSubscription();\n    error InsufficientBalance();\n    error MustBeSubOwner(address owner);\n    error TooManyConsumers();\n    error InvalidConsumer();\n    error InvalidRandomWords();\n    error Reentrant();\n\n    event RandomWordsRequested(\n        bytes32 indexed keyHash,\n        uint256 requestId,\n        uint256 preSeed,\n        uint64 indexed subId,\n        uint16 minimumRequestConfirmations,\n        uint32 callbackGasLimit,\n        uint32 numWords,\n        address indexed sender\n    );\n    event RandomWordsFulfilled(\n        uint256 indexed requestId,\n        uint256 outputSeed,\n        uint96 payment,\n        bool success\n    );\n    event SubscriptionCreated(uint64 indexed subId, address owner);\n    event SubscriptionFunded(\n        uint64 indexed subId,\n        uint256 oldBalance,\n        uint256 newBalance\n    );\n    event SubscriptionCanceled(\n        uint64 indexed subId,\n        address to,\n        uint256 amount\n    );\n    event ConsumerAdded(uint64 indexed subId, address consumer);\n    event ConsumerRemoved(uint64 indexed subId, address consumer);\n    event ConfigSet();\n\n    struct Config {\n        // Reentrancy protection.\n        bool reentrancyLock;\n    }\n    Config private s_config;\n    uint64 s_currentSubId;\n    uint256 s_nextRequestId = 1;\n    uint256 s_nextPreSeed = 100;\n    struct Subscription {\n        address owner;\n        uint96 balance;\n    }\n    mapping(uint64 => Subscription) s_subscriptions; /* subId */ /* subscription */\n    mapping(uint64 => address[]) s_consumers; /* subId */ /* consumers */\n\n    struct Request {\n        uint64 subId;\n        uint32 callbackGasLimit;\n        uint32 numWords;\n    }\n    mapping(uint256 => Request) s_requests; /* requestId */ /* request */\n\n    constructor(\n        uint96 _baseFee,\n        uint96 _gasPriceLink\n    ) ConfirmedOwner(msg.sender) {\n        BASE_FEE = _baseFee;\n        GAS_PRICE_LINK = _gasPriceLink;\n        setConfig();\n    }\n\n    /**\n     * @notice Sets the configuration of the vrfv2 mock coordinator\n     */\n    function setConfig() public onlyOwner {\n        s_config = Config({reentrancyLock: false});\n        emit ConfigSet();\n    }\n\n    function consumerIsAdded(\n        uint64 _subId,\n        address _consumer\n    ) public view returns (bool) {\n        address[] memory consumers = s_consumers[_subId];\n        for (uint256 i = 0; i < consumers.length; i++) {\n            if (consumers[i] == _consumer) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    modifier onlyValidConsumer(uint64 _subId, address _consumer) {\n        if (!consumerIsAdded(_subId, _consumer)) {\n            revert InvalidConsumer();\n        }\n        _;\n    }\n\n    /**\n     * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\n     * @notice consumer.\n     *\n     * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\n     * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\n     * @dev against the real coordinator a small amount of additional LINK is required.\n     *\n     * @param _requestId the request to fulfill\n     * @param _consumer the VRF randomness consumer to send the result to\n     */\n    function fulfillRandomWords(\n        uint256 _requestId,\n        address _consumer\n    ) external nonReentrant {\n        fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\n    }\n\n    /**\n     * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\n     *\n     * @param _requestId the request to fulfill\n     * @param _consumer the VRF randomness consumer to send the result to\n     * @param _words user-provided random words\n     */\n    function fulfillRandomWordsWithOverride(\n        uint256 _requestId,\n        address _consumer,\n        uint256[] memory _words\n    ) public {\n        uint256 startGas = gasleft();\n        if (s_requests[_requestId].subId == 0) {\n            revert(\"nonexistent request\");\n        }\n        Request memory req = s_requests[_requestId];\n\n        if (_words.length == 0) {\n            _words = new uint256[](req.numWords);\n            for (uint256 i = 0; i < req.numWords; i++) {\n                _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\n            }\n        } else if (_words.length != req.numWords) {\n            revert InvalidRandomWords();\n        }\n\n        VRFConsumerBaseV2 v;\n        bytes memory callReq = abi.encodeWithSelector(\n            v.rawFulfillRandomWords.selector,\n            _requestId,\n            _words\n        );\n        s_config.reentrancyLock = true;\n        (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\n        s_config.reentrancyLock = false;\n\n        uint96 payment = uint96(\n            BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK)\n        );\n        if (s_subscriptions[req.subId].balance < payment) {\n            revert InsufficientBalance();\n        }\n        s_subscriptions[req.subId].balance -= payment;\n        delete (s_requests[_requestId]);\n        emit RandomWordsFulfilled(_requestId, _requestId, payment, success);\n    }\n\n    /**\n     * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\n     *\n     * @param _subId the subscription to fund\n     * @param _amount the amount to fund\n     */\n    function fundSubscription(uint64 _subId, uint96 _amount) public {\n        if (s_subscriptions[_subId].owner == address(0)) {\n            revert InvalidSubscription();\n        }\n        uint96 oldBalance = s_subscriptions[_subId].balance;\n        s_subscriptions[_subId].balance += _amount;\n        emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\n    }\n\n    function requestRandomWords(\n        bytes32 _keyHash,\n        uint64 _subId,\n        uint16 _minimumRequestConfirmations,\n        uint32 _callbackGasLimit,\n        uint32 _numWords\n    )\n        external\n        override\n        nonReentrant\n        onlyValidConsumer(_subId, msg.sender)\n        returns (uint256)\n    {\n        if (s_subscriptions[_subId].owner == address(0)) {\n            revert InvalidSubscription();\n        }\n\n        uint256 requestId = s_nextRequestId++;\n        uint256 preSeed = s_nextPreSeed++;\n\n        s_requests[requestId] = Request({\n            subId: _subId,\n            callbackGasLimit: _callbackGasLimit,\n            numWords: _numWords\n        });\n\n        emit RandomWordsRequested(\n            _keyHash,\n            requestId,\n            preSeed,\n            _subId,\n            _minimumRequestConfirmations,\n            _callbackGasLimit,\n            _numWords,\n            msg.sender\n        );\n        return requestId;\n    }\n\n    function createSubscription() external override returns (uint64 _subId) {\n        s_currentSubId++;\n        s_subscriptions[s_currentSubId] = Subscription({\n            owner: msg.sender,\n            balance: 0\n        });\n        emit SubscriptionCreated(s_currentSubId, msg.sender);\n        return s_currentSubId;\n    }\n\n    function getSubscription(\n        uint64 _subId\n    )\n        external\n        view\n        override\n        returns (\n            uint96 balance,\n            uint64 reqCount,\n            address owner,\n            address[] memory consumers\n        )\n    {\n        if (s_subscriptions[_subId].owner == address(0)) {\n            revert InvalidSubscription();\n        }\n        return (\n            s_subscriptions[_subId].balance,\n            0,\n            s_subscriptions[_subId].owner,\n            s_consumers[_subId]\n        );\n    }\n\n    function cancelSubscription(\n        uint64 _subId,\n        address _to\n    ) external override onlySubOwner(_subId) nonReentrant {\n        emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\n        delete (s_subscriptions[_subId]);\n    }\n\n    modifier onlySubOwner(uint64 _subId) {\n        address owner = s_subscriptions[_subId].owner;\n        if (owner == address(0)) {\n            revert InvalidSubscription();\n        }\n        if (msg.sender != owner) {\n            revert MustBeSubOwner(owner);\n        }\n        _;\n    }\n\n    function getRequestConfig()\n        external\n        pure\n        override\n        returns (uint16, uint32, bytes32[] memory)\n    {\n        return (3, 2000000, new bytes32[](0));\n    }\n\n    function addConsumer(\n        uint64 _subId,\n        address _consumer\n    ) external override onlySubOwner(_subId) {\n        if (s_consumers[_subId].length == MAX_CONSUMERS) {\n            revert TooManyConsumers();\n        }\n\n        if (consumerIsAdded(_subId, _consumer)) {\n            return;\n        }\n\n        s_consumers[_subId].push(_consumer);\n        emit ConsumerAdded(_subId, _consumer);\n    }\n\n    function removeConsumer(\n        uint64 _subId,\n        address _consumer\n    )\n        external\n        override\n        onlySubOwner(_subId)\n        onlyValidConsumer(_subId, _consumer)\n        nonReentrant\n    {\n        address[] storage consumers = s_consumers[_subId];\n        for (uint256 i = 0; i < consumers.length; i++) {\n            if (consumers[i] == _consumer) {\n                address last = consumers[consumers.length - 1];\n                consumers[i] = last;\n                consumers.pop();\n                break;\n            }\n        }\n\n        emit ConsumerRemoved(_subId, _consumer);\n    }\n\n    function getConfig()\n        external\n        pure\n        returns (\n            uint16 minimumRequestConfirmations,\n            uint32 maxGasLimit,\n            uint32 stalenessSeconds,\n            uint32 gasAfterPaymentCalculation\n        )\n    {\n        return (4, 2_500_000, 2_700, 33285);\n    }\n\n    function getFeeConfig()\n        external\n        pure\n        returns (\n            uint32 fulfillmentFlatFeeLinkPPMTier1,\n            uint32 fulfillmentFlatFeeLinkPPMTier2,\n            uint32 fulfillmentFlatFeeLinkPPMTier3,\n            uint32 fulfillmentFlatFeeLinkPPMTier4,\n            uint32 fulfillmentFlatFeeLinkPPMTier5,\n            uint24 reqsForTier2,\n            uint24 reqsForTier3,\n            uint24 reqsForTier4,\n            uint24 reqsForTier5\n        )\n    {\n        return (\n            100000, // 0.1 LINK\n            100000, // 0.1 LINK\n            100000, // 0.1 LINK\n            100000, // 0.1 LINK\n            100000, // 0.1 LINK\n            0,\n            0,\n            0,\n            0\n        );\n    }\n\n    modifier nonReentrant() {\n        if (s_config.reentrancyLock) {\n            revert Reentrant();\n        }\n        _;\n    }\n\n    function getFallbackWeiPerUnitLink() external pure returns (int256) {\n        return 4000000000000000; // 0.004 Ether\n    }\n\n    function requestSubscriptionOwnerTransfer(\n        uint64 /*_subId*/,\n        address /*_newOwner*/\n    ) external pure override {\n        revert(\"not implemented\");\n    }\n\n    function acceptSubscriptionOwnerTransfer(\n        uint64 /*_subId*/\n    ) external pure override {\n        revert(\"not implemented\");\n    }\n\n    function pendingRequestExists(\n        uint64 /*subId*/\n    ) public pure override returns (bool) {\n        revert(\"not implemented\");\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ConfirmedOwnerWithProposal.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IOwnable.sol\";\n\n/**\n * @title The ConfirmedOwner contract\n * @notice A contract with helpers for basic contract ownership.\n */\ncontract ConfirmedOwnerWithProposal is IOwnable {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /**\n   * @notice Allows an owner to begin transferring ownership to a new address,\n   * pending.\n   */\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /**\n   * @notice Allows an ownership transfer to be completed by the recipient.\n   */\n  function acceptOwnership() external override {\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /**\n   * @notice Get the current owner\n   */\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /**\n   * @notice validate, transfer ownership, and emit relevant events\n   */\n  function _transferOwnership(address to) private {\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /**\n   * @notice validate access\n   */\n  function _validateOwnership() internal view {\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /**\n   * @notice Reverts if called by anyone other than the contract owner.\n   */\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\n\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n    error OnlyCoordinatorCanFulfill(address have, address want);\n    address private immutable vrfCoordinator;\n\n    /**\n     * @param _vrfCoordinator address of VRFCoordinator contract\n     */\n    constructor(address _vrfCoordinator) {\n        vrfCoordinator = _vrfCoordinator;\n    }\n\n    /**\n     * @notice fulfillRandomness handles the VRF response. Your contract must\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n     * @notice principles to keep in mind when implementing your fulfillRandomness\n     * @notice method.\n     *\n     * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n     * @dev signature, and will call it once it has verified the proof\n     * @dev associated with the randomness. (It is triggered via a call to\n     * @dev rawFulfillRandomness, below.)\n     *\n     * @param requestId The Id initially returned by requestRandomness\n     * @param randomWords the VRF output expanded to the requested number of words\n     */\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) internal virtual;\n\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n    // the origin of the call\n    function rawFulfillRandomWords(\n        uint256 requestId,\n        uint256[] memory randomWords\n    ) external {\n        if (msg.sender != vrfCoordinator) {\n            revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n        }\n        fulfillRandomWords(requestId, randomWords);\n    }\n}\n"
    },
    "contracts/Raffle.sol": {
      "content": "//contract called raffle\n\n//players can enter the lottert (paying some amount)\n// pick a random winner(verifyably random)\n//winner to be selected at a particular interval (automated)\n// Chainlink oracle is needed for randomness, automated execution (chisnlink keepers)\n// /home/elizabeth/projects/blockchain_/raffle/node_modules/@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/KeepersVRFConsumer.sol\";\n\nerror Raffle__NotEnoughETHEntered();\nerror Raffle__TransferFailed();\nerror Raffle__NotOpened();\nerror Raffle__UpkeepNotNeeded(\n    uint256 currentBalance,\n    uint256 num_players,\n    uint256 raffleState\n);\n\n/**\n * @title A sample Raffle Contract\n * @author Adebayo Elizabeth\n * @notice This contract is for creating an untamperable decentralized smart contract\n * @dev this implements Chainlink VRF and Chainlink Keepers\n */\n\nabstract contract Raffle is VRFConsumerBaseV2, KeepersVRFConsumer {\n    //type declarations\n    enum RaffleState {\n        OPEN,\n        CALCULATING\n        //uint256 0 = OPEN, 1 = CALCULATING\n    }\n    //state variables\n    uint256 private immutable i_entranceFee;\n    address payable[] private s_players;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gasLane;\n    uint64 private immutable i_subscriptionId;\n    uint32 private immutable i_callbackGasLimit;\n    uint16 private constant CUSTOM_REQUEST_CONFIRMATIONS = 3;\n    uint32 private constant NUM_WORDS = 1;\n\n    //lottery variables\n    address private s_recentWinner;\n    RaffleState private s_raffleState;\n    //uint256 private s_lastTimeStamp;\n    uint256 private i_interval;\n\n    // Events\n    event RaffleEnter(address indexed player);\n    event RequestedRaffleWinner(uint256 indexed requestId);\n    event WinnerPicked(address indexed Winner);\n\n    constructor(\n        address vrfCoordinatorV2,\n        uint256 entranceFee,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit,\n        uint256 interval //VRFConsumerBaseV2(vrfCoordinatorV2)\n    ) {\n        i_entranceFee = entranceFee;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n        s_raffleState = RaffleState.OPEN;\n        s_lastTimeStamp = block.timestamp;\n        i_interval = interval;\n    }\n\n    function enterRaffle() public payable {\n        if (msg.value < i_entranceFee) {\n            revert Raffle__NotEnoughETHEntered();\n        }\n        if (s_raffleState != RaffleState.OPEN) {\n            revert Raffle__NotOpened();\n        }\n        s_players.push(payable(msg.sender));\n        emit RaffleEnter(msg.sender);\n    }\n\n    /**\n     * @dev this is the function that the chainlink keeper nodes call\n     * they look for the `upkeepNEeded` to return true.\n     * the following should be true in orer to return true:\n     * 1. Our time interval should have passed\n     * 2. the lottery should haave at least 1 player, and have some ETH\n     * our subscription is funded with LINK\n     * the lottery should be in an \"open\" state.  \n     * \n   \n     */\n    function CustomCheckUpkeep(\n        bytes memory /*checkData */\n    ) public view returns (bool upkeepNeeded, bytes memory /* performData */) {\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\n        bool hasPlayers = (s_players.length > 0);\n        bool hasBalance = address(this).balance > 0;\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\n    }\n\n    //Undeclared identifier. \"checkUpkeep\" is not (or not yet) visible at this point.\n    function CustomPerformUpkeep(bytes calldata /* performData */) external {\n        (bool upkeepNeeded, ) = CustomCheckUpkeep(\"\");\n        if (!upkeepNeeded) {\n            revert Raffle__UpkeepNotNeeded(\n                address(this).balance,\n                s_players.length,\n                uint256(s_raffleState)\n            );\n        }\n        s_raffleState = RaffleState.CALCULATING;\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            NUM_WORDS\n        );\n        emit RequestedRaffleWinner(requestId);\n    }\n\n    function fufillRandomWords(\n        uint256, //requestId,\n        uint256[] memory randomWords\n    ) internal {\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\n        address payable recentWinner = s_players[indexOfWinner];\n        s_recentWinner = recentWinner;\n        s_raffleState = RaffleState.OPEN;\n        s_players = new address payable[](0);\n        s_lastTimeStamp = block.timestamp;\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert Raffle__TransferFailed();\n        }\n        emit WinnerPicked(recentWinner);\n    }\n\n    // view and pure functions\n    function getEntranceRaffle() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    function getplayer(uint256 index) public view returns (address) {\n        return s_players[index];\n    }\n\n    function getRecentWinner() public view returns (address) {\n        return s_recentWinner;\n    }\n\n    function getRaffleState() public view returns (RaffleState) {\n        return s_raffleState;\n    }\n\n    function getNumWords() public pure returns (uint256) {\n        return NUM_WORDS;\n    }\n\n    function getNumberOfPlayers() public view returns (uint256) {\n        return s_players.length;\n    }\n\n    function getLatestTimeStamp() public view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    function getRequestConfirmations() public pure returns (uint256) {\n        return CUSTOM_REQUEST_CONFIRMATIONS;\n    }\n}\n"
    },
    "contracts/test/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\";\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}